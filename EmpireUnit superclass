import greenfoot.*;
import java.util.*;
public class EmpireUnit extends Actor
{
    private int HP = 100;
    private int dmg = 10;
    private int cost = 100;
    private int range = 2;
    private GreenfootSound attackSound = new GreenfootSound("RifleFire.mp3");
    private boolean isPlayer = false;
    private int oldX1 = 0;
    private int oldY1 = 0;
    private int numChar = 4;

    public EmpireUnit(int HP, int dmg, int cost, int range, GreenfootSound attackSound) {
        this.HP = HP;
        this.dmg = dmg;
        this.cost = cost;
        this.range = range;
        this.attackSound = attackSound;
        if(!isPlayer){
            getImage().mirrorHorizontally();
        }
    }

    public void act()
    {
        //((Battlefield)getWorld()).showText("", oldX1, oldY1);
        ((Battlefield)getWorld()).showText("" + getHP(), getX(), getY());
        //int oldX = getX();
        //int oldY = getY();

        //oldX1 = oldX;
        //oldY1 = oldY;
    }

    public int getHP(){
        return HP;
    }

    public void setHP(int HP){
        this.HP = HP;
    }

    public int getDmg(){
        return dmg;
    }

    public void setDmg(int dmg){
        this.dmg = dmg;
    }

    public int getCost(){
        return cost;
    }

    public int getRange(){
        return range;
    }

    public int getnumChar(){
        return numChar;
    }

    public void AImove() { // UnionUnit a){
        List<UnionUnit> list = getWorld().getObjects(UnionUnit.class);
        double shortestDistance = 99999;
        int index = -1;
        for(int i=0; i<list.size(); i++) {
            double distance = getDistance(list.get(i));
            if(distance < shortestDistance) {
                shortestDistance = distance;
                index = i;
            }
        }
        if(index == -1) {
            return; // IF NO UNION UNITS, DO NOTHING
        }
        UnionUnit closest = list.get(index);
        System.out.println("I AM "+this+" at "+ getX() + " " +getY());
        System.out.println(closest + " " + closest.getX() + " " + closest.getY() + " -- distance was : "+shortestDistance);
        if(!(Battlefield.getGameEnd())){
            int oldX = getX();
            int oldY = getY();
            if(Math.abs(getX() - ((Battlefield)getWorld()).unionBase.getX()) <= getRange()){
                int health = ((Battlefield)getWorld()).unionBase.getHP() - getDmg();
                ((Battlefield)getWorld()).unionBase.setHP(health);
                if(getWorld() instanceof Battlefield){
                    Battlefield b = (Battlefield)getWorld();
                    int lostCash = b.getAICash() + getDmg()*2;
                    b.setAICash(lostCash);
                    System.out.println("AI CASH: "+b.getAICash());
                }
            }
            else if(Math.abs(getX()-closest.getX()) <= getRange() && Math.abs(getY()-closest.getY()) <= getRange()){
                attackVis(closest);
                if(this instanceof EmpireHelicopter && closest instanceof UnionTank){
                    int health = closest.getHP() - 75;
                    closest.setHP(health);
                }
                else{
                    int health = closest.getHP() - getDmg();
                    closest.setHP(health);
                }
                if(getWorld() instanceof Battlefield){
                    Battlefield b = (Battlefield)getWorld();
                    int lostCash = b.getAICash() + getDmg()*2;
                    b.setAICash(lostCash);
                    System.out.println("AI CASH: "+b.getAICash());
                }
            }

            else if(Math.abs(closest.getX()-getX()) > Math.abs(closest.getY()-getY())){

                if(closest.getX() - getX() < 0){
                    setLocation(getX()-1,getY());
                    fixLocation();
                }

                else{
                    setLocation(getX() + 1, getY());
                    fixLocation();
                }
                oldX1 = oldX;
                oldY1 = oldY;
                
                ((Battlefield)getWorld()).showText("", oldX1, oldY1);
                ((Battlefield)getWorld()).showText("" + getHP(), getX(), getY());
            }else{

                if(closest.getY()-getY() > 0){
                    setLocation(getX(), getY()+1);
                    fixLocation();
                }
                else{
                    setLocation(getX(), getY() - 1);
                    fixLocation();
                }
            }
            Actor testEnemy = getOneObjectAtOffset(0, 0, UnionUnit.class);
            Actor testAlly = getOneObjectAtOffset(0, 0, EmpireUnit.class);
            if(testEnemy != null || testAlly != null){
                setLocation(oldX, oldY);
            }
        }
    }

    public void attackVis(UnionUnit a){
        if(this instanceof EmpireHelicopter && a instanceof UnionTank){
            ((Battlefield)getWorld()).addObject(new RocketFlare(), getX(), getY());
        }
        else{
            MuzzleFlare m = new MuzzleFlare();
            m.getImage().mirrorHorizontally();
            ((Battlefield)getWorld()).addObject(m, getX(), getY());
        }
        if(this instanceof EmpireTank || this instanceof EmpireHelicopter && a instanceof UnionTank){
            ((Battlefield)getWorld()).addObject(new ShellHit(), a.getX(), a.getY());
        }
        else{
            ((Battlefield)getWorld()).addObject(new BulletHit(), a.getX(), a.getY());
        }
        if(this instanceof EmpireHelicopter && a instanceof UnionTank){
            attackSound = new GreenfootSound("RocketFire.mp3");
        }
        attackSound.play();
        Greenfoot.delay(30);
        getWorld().removeObjects(getWorld().getObjects(RocketFlare.class));
        getWorld().removeObjects(getWorld().getObjects(MuzzleFlare.class));
        getWorld().removeObjects(getWorld().getObjects(ShellHit.class));
        getWorld().removeObjects(getWorld().getObjects(BulletHit.class));
        if(this instanceof EmpireHelicopter && a instanceof UnionTank){
            attackSound = new GreenfootSound("MGFire.mp3");
        }
    }

    public void fixLocation(){
        if(getX() < 6){
            setLocation(6, getY());
        }
        if(getX() > 14){
            setLocation(14, getY());
        }
        if(getY() < 2){
            setLocation(getX(), 2);
        }
        if(getY() > 11){
            setLocation(getX(), 11);
        }
    }

    public boolean isNear(){
        if(getObjectsInRange(1, EmpireRifleman.class).size() == 0){
            return true;
        }
        else{
            return false;
        }
    }

    public double getDistance(UnionUnit a){
        return Math.sqrt(Math.pow(Math.abs(a.getX()-getX()),2)+Math.pow(Math.abs(a.getY()-getY()),2));
    }

    public void hitByShell(){
        GreenfootSound boom = new GreenfootSound("Boom.mp3");
        boom.play();
    }
}
