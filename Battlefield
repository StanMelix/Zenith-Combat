import greenfoot.*;
import java.util.List;
import java.util.ArrayList;
public class Battlefield extends World
{
    private int playerCash = 0;
    private int aiCash = 0;
    //private int timer = 100;
    private int turnInt = 0;
    private static boolean gameEnded = false;
    private int nukeCooldown = 10;
    ReadyButton readyButton = new ReadyButton();
    private int turnNum = 0;
    UnionUnit selected;
    UnionTurret selectedT;
    UnionBase unionBase = new UnionBase();
    EmpireBase empireBase = new EmpireBase();
    AttackButton attackButton = new AttackButton();
    MoveButton moveButton = new MoveButton();
    
    GreenfootSound unionTheme = new GreenfootSound("UnionTheme.mp3");
    public Battlefield()
    {    
        super(21, 14, 60); 
        setBackground("Battlefield.png");
        prepare();
        addObject(new CashDisplay(), 1, 1);
        //showText("" + playerCash, 1, 1);
        unionTheme.playLoop();
    }

    private void prepare()
    {
        // Initialize/create starting Union Riflemen.
        UnionRifleman unionRifleman = new UnionRifleman();
        UnionRifleman unionRifleman2 = new UnionRifleman();
        UnionRifleman unionRifleman3 = new UnionRifleman();
        UnionRifleman unionRifleman4 = new UnionRifleman();
        List<UnionRifleman> listU = new ArrayList<UnionRifleman>();
        listU.add(unionRifleman); listU.add(unionRifleman2); listU.add(unionRifleman3); listU.add(unionRifleman4);
        if(unionRifleman.getIsPlayer() == true){
            int y = 3;
            for(int i = 0; i < listU.size(); i++){
                addObject(listU.get(i), 6, y);
                y += 2;
                if(i == 1){y++;}
            }
        }
        else{
            int y = 3;
            for(int i = 0; i < listU.size(); i++){
                addObject(listU.get(i), 14, y);
                y += 2;
                if(i == 1){y++;}
            }
        }
        // Initialize/create starting Empire Riflemen.
        EmpireRifleman empireRifleman = new EmpireRifleman();
        EmpireRifleman empireRifleman2 = new EmpireRifleman();
        EmpireRifleman empireRifleman3 = new EmpireRifleman();
        EmpireRifleman empireRifleman4 = new EmpireRifleman();
        List<EmpireRifleman> listE = new ArrayList<EmpireRifleman>();
        listE.add(empireRifleman); listE.add(empireRifleman2); listE.add(empireRifleman3); listE.add(empireRifleman4);
        if(empireRifleman.getIsPlayer() == true){
            int y = 3;
            for(int i = 0; i < listE.size(); i++){
                addObject(listE.get(i), 6, y);
                y += 2;
                if(i == 1){y++;}
            }
        }
        else{
            int y = 3;
            for(int i = 0; i < listE.size(); i++){
                addObject(listE.get(i), 14, y);
                y += 2;
                if(i == 1){y++;}
            }
        }
        // Create/initialize bases.
        if(unionBase.getIsPlayer() == true){
            addObject(unionBase,4,6);
            addObject(empireBase,16,6);
            empireBase.getImage().mirrorHorizontally();
        }
        else{
            addObject(empireBase,4,6);
            addObject(unionBase,16,6);
            unionBase.getImage().mirrorHorizontally();
        }
        addObject(readyButton,19,3);
        showText("Player", 1, 2);
        // Create/initialize the shop.
        SpawnUnionRifleman rifleButton = new SpawnUnionRifleman();
        addObject(rifleButton,3,0);
        SpawnUnionMachineGunner MGButton = new SpawnUnionMachineGunner();
        addObject(MGButton,5,0);
        SpawnUnionOfficer officerButton = new SpawnUnionOfficer();
        addObject(officerButton,7,0);
        SpawnUnionTank tankButton = new SpawnUnionTank();
        addObject(tankButton,9,0);
        SpawnUnionHeli heliButton = new SpawnUnionHeli();
        addObject(heliButton,11,0);
        SpawnUnionMortar mortarButton = new SpawnUnionMortar();
        addObject(mortarButton,13,0);
        SpawnUnionRocketArtillery rocketButton = new SpawnUnionRocketArtillery();
        addObject(rocketButton,15,0);
        SpawnNuke nukeButton = new SpawnNuke();
        addObject(nukeButton,17,0);
        SellTurret sell = new SellTurret();
        addObject(sell,19,0);
    }

    public void act(){
        if(unionBase.getHP() <= 0 || empireBase.getHP() <= 0){
            // Ends the game if one of the bases is destroyed.
            gameEnded = true;
            //unionTheme.stop();
            if(unionBase.getIsPlayer()){
                if(unionBase.getHP() <= 0){
                    unionTheme.stop();
                    EmpireWinVsUnion b = new EmpireWinVsUnion();
                    Greenfoot.setWorld(b);
                }
                else if(empireBase.getHP() <= 0){
                    unionTheme.stop();
                    UnionWinVsEmpire b = new UnionWinVsEmpire();
                    Greenfoot.setWorld(b);
                }
            }
            else{
                if(empireBase.getHP() <= 0){
                    showText("Union Victory", 1, 1);
                }
                else if(unionBase.getHP() <= 0){
                    showText("Empire Victory", 1, 1);
                }
            }
        }
        else{
            // Progresses the game's turns.
            //timer--;
            if(Greenfoot.mouseClicked(readyButton) && turnInt == 0){
                playerCash += 50;
                showText("Computer", 1, 2);
                turnInt = 1;
                turnNum++;
                List<UnionUnit> unionUnits = new ArrayList<UnionUnit>(getObjects(UnionUnit.class));
                for(int i = 0; i < unionUnits.size(); i++){
                    unionUnits.get(i).resetB();
                }

                List<EmpireUnit> empireUnits = new ArrayList<EmpireUnit>(getObjects(EmpireUnit.class));
                for(int i = 0; i < empireUnits.size(); i++){
                    //for(int j  = 0; j < unionUnits.size(); j++){
                        empireUnits.get(i).AImove();//unionUnits.get(j));
                    //}
                    
                }

                List<UnionTurret> unionTurrets = new ArrayList<UnionTurret>(getObjects(UnionTurret.class));
                for(int i = 0; i < unionTurrets.size(); i++){
                    unionTurrets.get(i).reset();
                }
                 if(turnNum%2 == 0 && turnNum != 0){
                    int y = (int)(Math.random()*10)+2;
                    if(getAICash() >= 100){
                        if(getAICash() >= 750){
                            //Spawn Tank
                            EmpireTank Tank = new EmpireTank();
                            addObject(Tank, 14, y);
                            int cash = getAICash() - 750;
                            setAICash(cash);
                            
                        }
                        else if(getAICash() >= 500 && getAICash() < 750){
                            //Spawn Helicopter
                            
                            EmpireHelicopter Helicopter = new EmpireHelicopter();
                            addObject(Helicopter, 14, y);
                            int cash = getAICash() - 500;
                            setAICash(cash);
                        }
                        else if(getAICash() >= 400 && getAICash() < 500){
                            //Spawn Officer
                            EmpireOfficer Officer = new EmpireOfficer();
                            addObject(Officer, 14, y);
                            int cash = getAICash() - 400;
                            setAICash(cash);
                        }
                        else if(getAICash() >= 200 && getAICash() < 400){
                            //Spawn Machine gunner
                            EmpireMachineGunner MG = new EmpireMachineGunner();
                            addObject(MG, 14, y);
                            int cash = getAICash() - 200;
                            setAICash(cash);
                        }
                        else{
                            //Spawn Rifleman
                            EmpireRifleman rifleman = new EmpireRifleman();
                            addObject(rifleman, 14, y);
                            System.out.println("spawned");
                            int cash = getAICash() - 100;
                            setAICash(cash);
                        }
                    }
                }
                setAICash(getAICash() + 100);
                showText("Player", 1, 2);
                showText("Nuke cooldown:" + nukeCooldown, 2, 13);
                turnInt = 0;
                nukeCooldown++;
            }
            removeDed();
            //if(timer < 0){
            //    if(turnInt == 0){turnInt++;}
            //    else{turnInt--;}
            //    timer = 100;
            //}
            // Show health amounts for bases and units.
            //if(unionBase.getIsPlayer()){
            //    showText("" + unionBase.getHP(), 2, 6);
            //    showText("" + empireBase.getHP(), 18, 6);
            //}
            //else{
            //    showText("" + empireBase.getHP(), 2, 6);
            //    showText("" + unionBase.getHP(), 18, 6);
            //}
        }
    }

    public int getPlayerCash(){
        return playerCash;
    }

    public void setPlayerCash(int playerCash){
        this.playerCash = playerCash;
    }

    public int getAICash(){
        return aiCash;
    }

    public void setAICash(int aiCash){
        this.aiCash = aiCash;
    }

    public int getTurnInt(){
        return turnInt;
    }

    public int getNukeCooldown(){
        return nukeCooldown;
    }

    public void spawning(UnionUnit u){
        if(!(getGameEnd())){
            for(int y = 2; y < 12; y++){
                if(getObjectsAt(6,y,Actor.class).size() == 0){
                    addObject(new SpawnCell(u), 6, y);
                }
            }
        }
    }

    public void turretSpawning(UnionTurret t){
        if(!(getGameEnd())){
            for(int y = 3; y < 11; y++){
                if(getObjectsAt(4,y,UnionTurret.class).size() == 0){
                    addObject(new SpawnCell(t), 4, y);
                }
                if(y == 3 || y == 8){
                    y++;
                }
                else{
                    y+=2;
                }
            }
        }
    }

    public void attackOrMove(UnionUnit selected){
        System.out.println("fadhflajhdg");
        this.selected = selected;
        if(selected.getHasAttacked() == false){
            addObject(attackButton, 1, 3);
        }
        if(selected.getHasMoved() == false){
            addObject(moveButton, 1, 5);
        }
    }

    public void attackFinished(){
        removeObjects(getObjects(MuzzleFlare.class));
        removeObjects(getObjects(BulletHit.class));
    }

    public void dealDamage(){
        empireBase.setHP(empireBase.getHP() - 200);
        List<EmpireUnit> toDmg = new ArrayList<EmpireUnit>(getObjects(EmpireUnit.class));
        for(int i = 0; i < toDmg.size(); i++){
            (toDmg.get(i)).setHP((toDmg.get(i)).getHP() - 200);           
            int newCash = getPlayerCash() + 10;
            setPlayerCash(newCash);            
        }
    }

    public void nukeDrop(){
        nukeCooldown = 0;
        NuclearBomb bomb = new NuclearBomb();
        addObject(bomb, 10, 7);
    }

    public void nukeFinished(boolean nf){
        removeObjects(getObjects(NuclearBomb.class));
    }

    public void removeDed(){
        List<UnionUnit> unionUnits = new ArrayList<UnionUnit>(getObjects(UnionUnit.class));
        for(int i = 0; i < unionUnits.size(); i++){
            if((unionUnits.get(i)).getHP() <= 0){
                showText("", unionUnits.get(i).getX(), unionUnits.get(i).getY());
                removeObject(unionUnits.get(i));
            }
        }
        List<EmpireUnit> empireUnits = new ArrayList<EmpireUnit>(getObjects(EmpireUnit.class));
        for(int i = 0; i < empireUnits.size(); i++){
            if((empireUnits.get(i)).getHP() <= 0){
                showText("", empireUnits.get(i).getX(), empireUnits.get(i).getY());
                removeObject(empireUnits.get(i));
            }
        }
    }

    public static boolean getGameEnd(){
        return gameEnded;
    }
}
